model User {
  id              String    @id @default(uuid())
  name            String
  passwordHash    String    @map("password_hash")
  email           String    @unique
  phone           String
  image           String?
  emailVerifiedAt DateTime? @map("email_verified_at")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  integrations    Integration[]
  apiHealthChecks ApiHealthCheck[]
  refreshTokens   RefreshToken[]

  @@index([email])
  @@map("users")
}

model RefreshToken {
  id          String   @id @default(nanoid()) @db.VarChar(21)
  hashedToken String   @unique
  expiresAt   DateTime @map("expires_at")
  isActive    Boolean  @default(true) @map("is_active")
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

model OneTimeCode {
  id         String           @id @default(uuid())
  identifier String           @unique
  code       String
  type       VerificationType
  expiresAt  DateTime
  metadata   Json?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("one_time_codes")
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
