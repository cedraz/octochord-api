kind: pipeline
type: docker
name: deploy-octochord-api

steps:
  - name: build-and-push
    image: plugins/docker
    settings:
      # As credenciais são lidas automaticamente daqui
      username:
        from_secret: docker_username
      password:
        from_secret: docker_password
      # O repositório para onde a imagem será enviada
      repo: icarocedraz/octochord-api
      # As tags que serão aplicadas à nova imagem
      tags:
        - latest
        - '${DRONE_COMMIT_SHA:0:7}' # Uma tag única para cada commit
      # A estratégia de cache inteligente que havíamos discutido
      cache_from:
        - icarocedraz/octochord-api:cache-${DRONE_BRANCH}
        - icarocedraz/octochord-api:cache-main
      cache_to: icarocedraz/octochord-api:cache-${DRONE_BRANCH},mode=max

  - name: deploy-to-server
    image: docker:23
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
      - name: project-files
        path: /app
    commands:
      - apk add --no-cache docker-cli-compose
      - cd /app
      - docker compose -p octochord --env-file .env.prod pull
      - docker compose -p octochord --env-file .env.prod down --remove-orphans || true
      - docker compose -p octochord --env-file .env.prod up -d --force-recreate --remove-orphans

volumes:
  - name: dockersock
    host:
      path: /var/run/docker.sock
  - name: project-files
    host:
      path: /home/cedraz-ubuntu-2/Documentos/deploys/octochord

trigger:
  branch:
    - main
  event:
    - push
